/*
 * Zero Notification Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"net/http"
	"time"

	"github.com/commitdev/zero-notification-service/internal/config"
	"github.com/commitdev/zero-notification-service/internal/log"
	"go.uber.org/zap"
)

// HTTP Reponse Writer with a little wrapper to collect the status code
type loggingResponseWriter struct {
	http.ResponseWriter
	statusCode int
}

func (lrw *loggingResponseWriter) WriteHeader(code int) {
	lrw.statusCode = code
	lrw.ResponseWriter.WriteHeader(code)
}

func Logger(inner http.Handler, name string) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		lrw := &loggingResponseWriter{w, http.StatusOK}
		inner.ServeHTTP(lrw, r)

		if config.GetConfig().StructuredLogging {
			http := log.ECSHTTP{
				Request: log.ECSRequest{
					Method: r.Method,
				},
				Response: log.ECSResponse{
					StatusCode: lrw.statusCode,
				},
			}
			url := log.ECSURL{Original: r.RequestURI}
			event := log.ECSEvent{Action: name, Duration: time.Since(start)}

			zap.S().Infow("HTTP Request", zap.Any("http", http), zap.Any("url", url), zap.Any("event", event))
		} else {
			zap.S().Infow("HTTP Request",
				"method", r.Method,
				"status_code", lrw.statusCode,
				"url", r.RequestURI,
				"action", name,
				"duration", time.Since(start),
			)
		}
	})
}
